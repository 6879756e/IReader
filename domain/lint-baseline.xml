<?xml version="1.0" encoding="UTF-8"?>
<issues name="AGP (7.1.1)" by="lint 7.1.1" client="gradle" dependencies="false" format="6"
    type="baseline" variant="all" version="7.1.1">

    <issue id="LintError"
        message="Unexpected failure during lint analysis of PreferencesHelper.kt (this is a bug in lint or one of the libraries it depends on)&#xA;&#xA;Message: () -> kotlin.String&#xA;Stack: `IllegalStateException:KtLightClassForFacadeImpl$Companion.createForFacadeNoCache(KtLightClassForFacadeImpl.kt:271)←FacadeCache$FacadeCacheData$cache$1.createValue(FacadeCache.kt:30)←FacadeCache$FacadeCacheData$cache$1.createValue(FacadeCache.kt:28)←SLRUCache.get(SLRUCache.java:47)←FacadeCache.get(FacadeCache.kt:47)←KtLightClassForFacadeImpl$Companion.createForFacade(KtLightClassForFacadeImpl.kt:281)←CliKotlinAsJavaSupport.getFacadeClassesInPackage(CliKotlinAsJavaSupport.kt:40)←LightClassUtilsKt.findFacadeClass(lightClassUtils.kt:58)`&#xA;&#xA;You can run with --stacktrace or set environment variable `LINT_PRINT_STACKTRACE=true` to dump a full stacktrace to stdout.">
        <location file="src/main/java/org/ireader/domain/repository/PreferencesHelper.kt" />
    </issue>

    <issue id="LintError"
        message="Unexpected failure during lint analysis of PreferencesHelper.kt (this is a bug in lint or one of the libraries it depends on)&#xA;&#xA;Message: () -> kotlin.String&#xA;Stack: `IllegalStateException:KtLightClassForFacadeImpl$Companion.createForFacadeNoCache(KtLightClassForFacadeImpl.kt:271)←FacadeCache$FacadeCacheData$cache$1.createValue(FacadeCache.kt:30)←FacadeCache$FacadeCacheData$cache$1.createValue(FacadeCache.kt:28)←SLRUCache.get(SLRUCache.java:47)←FacadeCache.get(FacadeCache.kt:47)←KtLightClassForFacadeImpl$Companion.createForFacade(KtLightClassForFacadeImpl.kt:281)←CliKotlinAsJavaSupport.getFacadeClassesInPackage(CliKotlinAsJavaSupport.kt:40)←LightClassUtilsKt.findFacadeClass(lightClassUtils.kt:58)`&#xA;&#xA;You can run with --stacktrace or set environment variable `LINT_PRINT_STACKTRACE=true` to dump a full stacktrace to stdout.">
        <location file="src/main/java/org/ireader/domain/repository/PreferencesHelper.kt" />
    </issue>

    <issue errorLine1="    val importance: Int = NotificationManager.IMPORTANCE_DEFAULT,"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        id="InlinedApi"
        message="Field requires API level 24 (current min is 23): `android.app.NotificationManager#IMPORTANCE_DEFAULT`">
        <location column="27"
            file="src/main/java/org/ireader/domain/feature_services/notification/Notifications.kt"
            line="17" />
    </issue>

    <issue errorLine1="    val importance: Int = NotificationManager.IMPORTANCE_DEFAULT,"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        id="InlinedApi"
        message="Field requires API level 24 (current min is 23): `android.app.NotificationManager#IMPORTANCE_DEFAULT`">
        <location column="27"
            file="src/main/java/org/ireader/domain/feature_services/notification/Notifications.kt"
            line="17" />
    </issue>

    <issue errorLine1="    wakeLock.acquire()" errorLine2="             ~~~~~~~" id="Wakelock"
        message="Found a wakelock `acquire()` but no `release()` calls anywhere">
        <location column="14" file="src/main/java/org/ireader/domain/utils/ContextExtension.kt"
            line="233" />
    </issue>

    <issue errorLine1="    wakeLock.acquire()" errorLine2="    ~~~~~~~~~~~~~~~~~~"
        id="WakelockTimeout"
        message="Provide a timeout when requesting a wakelock with `PowerManager.Wakelock.acquire(long timeout)`. This will ensure the OS will cleanup any wakelocks that last longer than you intend, and will save your user&apos;s battery.">
        <location column="5" file="src/main/java/org/ireader/domain/utils/ContextExtension.kt"
            line="233" />
    </issue>

    <issue errorLine1="    wakeLock.acquire()" errorLine2="    ~~~~~~~~~~~~~~~~~~"
        id="WakelockTimeout"
        message="Provide a timeout when requesting a wakelock with `PowerManager.Wakelock.acquire(long timeout)`. This will ensure the OS will cleanup any wakelocks that last longer than you intend, and will save your user&apos;s battery.">
        <location column="5" file="src/main/java/org/ireader/domain/utils/ContextExtension.kt"
            line="233" />
    </issue>

    <issue
        errorLine1="    private val pendingIntentFlags = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {"
        errorLine2="                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        id="ObsoleteSdkInt" message="Unnecessary; SDK_INT is always >= 23">
        <location column="42"
            file="src/main/java/org/ireader/domain/feature_services/notification/DefaultNotificationHelper.kt"
            line="20" />
    </issue>

    <issue errorLine1="val flags = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        id="ObsoleteSdkInt" message="Unnecessary; SDK_INT is always >= 23">
        <location column="17"
            file="src/main/java/org/ireader/domain/feature_services/notification/PendingIndent.kt"
            line="6" />
    </issue>

    <issue
        errorLine1="    &lt;string name=&quot;query_must_not_be_empty&quot;>query must not be empty.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" id="UnusedResources"
        message="The resource `R.string.query_must_not_be_empty` appears to be unused">
        <location column="13" file="src/main/res/values/strings.xml" line="3" />
    </issue>

</issues>
